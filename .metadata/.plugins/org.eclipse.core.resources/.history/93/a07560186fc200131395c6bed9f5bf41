package com.shashi.android.xmlreaderexample;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserFactory;

import com.shashi.android.androidutility.ConverterUtil;
import com.shashi.android.xmlreaderexample.R;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.Spinner;
import android.widget.Toast;

public class MainActivityCurrency extends Activity{
	private Spinner spinner01;
	private Spinner spinner02;
	XmlPullParserFactory factory = null;
    XmlPullParser parser = null;
    List<Student> students;
	String network="Not connected to Internet";
	private EditText text;
	private EditText text1;
	final String urlString="http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml";
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_convert_currency);
		
		spinner01 = (Spinner) findViewById(R.id.spinner1);
		spinner02 = (Spinner) findViewById(R.id.spinner2);
	    spinner01.setOnItemSelectedListener(this);
	    addItemsOnSpinner1();
	    addItemsOnSpinner2();
	    
		List<Student> Students = null;
         
         XMLPullParserHandler parser = new XMLPullParserHandler();	
  
         network=NetworkUtil.getConnectivityStatusString(getApplicationContext());
    	 RadioButton temperatureButton = (RadioButton) findViewById(R.id.radio0);
         RadioButton lengthButton = (RadioButton) findViewById(R.id.radio1);
        
         
         if (temperatureButton.isChecked() && network!="Not connected to Internet" ) { 
        	 try {
					Toast.makeText(this, "Connected To Internet",Toast.LENGTH_LONG).show();
					Toast.makeText(this, network,Toast.LENGTH_LONG).show();
					Students=parser.fetchXML(urlString);   	 	
					Toast.makeText(this, "Success",Toast.LENGTH_LONG).show();
					
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
         }else if(lengthButton.isChecked() && network=="Not connected to Internet"){
        	 
        	 try {
        	   		Toast.makeText(this, "Not Connected To Internet",Toast.LENGTH_LONG).show();
        	   		students=new ArrayList<Student>();;
					Students = parser.parse(getAssets().open("eurofxref-daily.xml"),students);
					Toast.makeText(this, "Sucess",Toast.LENGTH_LONG).show();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        	 
        	 
         }else{	 
         }
    }
	
	 public void addItemsOnSpinner1() {
		  
			List<String> list = new ArrayList<String>();
			list.add("Choose");
			list.add("USD");
			list.add("JPY");
			list.add("BGN");
			list.add("CZK");
			list.add("DKK");
			list.add("GBP");
			list.add("HUF");
			list.add("LTL");
			list.add("PLN");
			list.add("RON");
			list.add("SEK");
			list.add("CHF");
			list.add("NOK");
			list.add("HRK");
			list.add("RUB");
			list.add("TRY");
			list.add("AUD");
			list.add("BRL");
			list.add("CAD");
			list.add("CNY");
			list.add("HKD");
			list.add("IDR");
			list.add("ILS");
			list.add("INR");
			list.add("KRW");
			list.add("MXN");
			list.add("MYR");
			list.add("NZD");
			list.add("PHP");
			list.add("SGD");
			list.add("THB");
			list.add("ZAR");
			ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,
				android.R.layout.simple_spinner_item, list);
			dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
			spinner01.setAdapter(dataAdapter);
		  }
	
	 public void addItemsOnSpinner2() {
		  
			List<String> list = new ArrayList<String>();
			list.add("Choose");
			list.add("USD");
			list.add("JPY");
			list.add("BGN");
			list.add("CZK");
			list.add("DKK");
			list.add("GBP");
			list.add("HUF");
			list.add("LTL");
			list.add("PLN");
			list.add("RON");
			list.add("SEK");
			list.add("CHF");
			list.add("NOK");
			list.add("HRK");
			list.add("RUB");
			list.add("TRY");
			list.add("AUD");
			list.add("BRL");
			list.add("CAD");
			list.add("CNY");
			list.add("HKD");
			list.add("IDR");
			list.add("ILS");
			list.add("INR");
			list.add("KRW");
			list.add("MXN");
			list.add("MYR");
			list.add("NZD");
			list.add("PHP");
			list.add("SGD");
			list.add("THB");
			list.add("ZAR");
			ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,
				android.R.layout.simple_spinner_item, list);
			dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
			spinner02.setAdapter(dataAdapter);
		  }
	
	 
	 public void onClick(AdapterView<?> parent, View view, int pos, long id) {
	
		 spinner01.setSelection(pos);
		 String selState = (String) spinner01.getSelectedItem();
		 spinner02.setSelection(pos);
		 String selState1 = (String) spinner02.getSelectedItem();
		 
		 if (text.getText().length() == 0) {
		        Toast.makeText(this, "Please enter a valid number",
		            Toast.LENGTH_LONG).show();
		        return;
		   }else {
		float inputValue = Float.parseFloat(text.getText().toString());
		
		
	 }
	 
	 public void onItemSelected() {
	        // An item was selected. You can retrieve the selected item using
	        // parent.getItemAtPosition(pos)
	
		 
		 
		 
		 switch(selState){
			
		 case "USD":
			 text1.setText(String.valueOf(inputValue));
		     break;
		 case "Meter":
			 text1.setText(String.valueOf(ConverterUtil.convertMeterToKilometer(inputValue)));
			 text2.setText(String.valueOf(inputValue));
			 text3.setText(String.valueOf(ConverterUtil.convertMeterTocentiMeter(inputValue))); 	 
			 text4.setText(String.valueOf(ConverterUtil.convertMeterTomilliMeter(inputValue)));
			 text5.setText(String.valueOf(ConverterUtil.convertMeterToMile(inputValue)));
			 text6.setText(String.valueOf(ConverterUtil.convertMeterToYard(inputValue)));
			 text7.setText(String.valueOf(ConverterUtil.convertMeterToFoot(inputValue)));
			 text8.setText(String.valueOf(ConverterUtil.convertMeterToInch(inputValue)));
			 text9.setText(String.valueOf(ConverterUtil.convertMeterToNauticleMile(inputValue)));
			 break;
		 case "Centimeter":
			 text1.setText(String.valueOf(ConverterUtil.convertCentimeterToKilometer(inputValue)));
			 text2.setText(String.valueOf(ConverterUtil.convertCentimeterTometer(inputValue)));
			 text3.setText(String.valueOf(inputValue));	 
			 text4.setText(String.valueOf(ConverterUtil.convertCentimeterTomilliMeter(inputValue)));
			 text5.setText(String.valueOf(ConverterUtil.convertCentimeterToMile(inputValue)));
			 text6.setText(String.valueOf(ConverterUtil.convertCentimeterToYard(inputValue)));
			 text7.setText(String.valueOf(ConverterUtil.convertCentimeterToFoot(inputValue)));
			 text8.setText(String.valueOf(ConverterUtil.convertCentimeteroInch(inputValue)));
			 text9.setText(String.valueOf(ConverterUtil.convertCentimeterToNauticleMile(inputValue)));
			 break;
		 case "Millimeter":
			 text1.setText(String.valueOf(ConverterUtil.convertMillimeterToKilometer(inputValue)));
			 text2.setText(String.valueOf(ConverterUtil.convertMillimeterTometer(inputValue)));
			 text3.setText(String.valueOf(ConverterUtil.convertMillimeterTocentiMeter(inputValue))); 	 
			 text4.setText(String.valueOf(inputValue));
			 text5.setText(String.valueOf(ConverterUtil.convertMillimeterToMile(inputValue)));
			 text6.setText(String.valueOf(ConverterUtil.convertMillimeterToYard(inputValue)));
			 text7.setText(String.valueOf(ConverterUtil.convertMillimeterToFoot(inputValue)));
			 text8.setText(String.valueOf(ConverterUtil.convertMillimeterToInch(inputValue)));
			 text9.setText(String.valueOf(ConverterUtil.convertMillimeterToNauticleMile(inputValue)));
			 break;
		 case "Mile":
			 text1.setText(String.valueOf(ConverterUtil.convertMileToKilometer(inputValue)));
			 text2.setText(String.valueOf(ConverterUtil.convertMileTometer(inputValue)));
			 text3.setText(String.valueOf(ConverterUtil.convertMilemeterTocentiMeter(inputValue)));
			 text4.setText(String.valueOf(ConverterUtil.convertMileToMillimeter(inputValue)));
			 text5.setText(String.valueOf(inputValue));
			 text6.setText(String.valueOf(ConverterUtil.convertMileToYard(inputValue)));
			 text7.setText(String.valueOf(ConverterUtil.convertMileToFoot(inputValue)));
			 text8.setText(String.valueOf(ConverterUtil.convertMileToInch(inputValue)));
			 text9.setText(String.valueOf(ConverterUtil.convertMileToNauticleMile(inputValue)));
			 break;
		 case "Yard":
			 text1.setText(String.valueOf(ConverterUtil.convertYardToKilometer(inputValue)));
			 text2.setText(String.valueOf(ConverterUtil.convertYardTometer(inputValue)));
			 text3.setText(String.valueOf(ConverterUtil.convertYardTocentiMeter(inputValue)));
			 text4.setText(String.valueOf(ConverterUtil.convertYardToMillimeter(inputValue)));
			 text5.setText(String.valueOf(ConverterUtil.convertYardToMile(inputValue)));
			 text6.setText(String.valueOf(inputValue));
			 text7.setText(String.valueOf(ConverterUtil.convertYardToFoot(inputValue)));
			 text8.setText(String.valueOf(ConverterUtil.convertYardToInch(inputValue)));
			 text9.setText(String.valueOf(ConverterUtil.convertYardToNauticleMile(inputValue)));
			 break;
		 case "Foot":
			 text1.setText(String.valueOf(ConverterUtil.convertFootToKilometer(inputValue)));
			 text2.setText(String.valueOf(ConverterUtil.convertFootTometer(inputValue)));
			 text3.setText(String.valueOf(ConverterUtil.convertFootTocentiMeter(inputValue)));
			 text4.setText(String.valueOf(ConverterUtil.convertFootToMillimeter(inputValue)));
			 text5.setText(String.valueOf(ConverterUtil.convertFootToMile(inputValue)));
			 text6.setText(String.valueOf(ConverterUtil.convertFootToYard(inputValue)));
			 text7.setText(String.valueOf(inputValue));
			 text8.setText(String.valueOf(ConverterUtil.convertFootToInch(inputValue)));
			 text9.setText(String.valueOf(ConverterUtil.convertFootToNauticleMile(inputValue)));
			 break;
		 case "Inch":
			 text1.setText(String.valueOf(ConverterUtil.convertInchToKilometer(inputValue)));
			 text2.setText(String.valueOf(ConverterUtil.convertInchTometer(inputValue)));
			 text3.setText(String.valueOf(ConverterUtil.convertInchTocentiMeter(inputValue)));
			 text4.setText(String.valueOf(ConverterUtil.convertInchToMillimeter(inputValue)));
			 text5.setText(String.valueOf(ConverterUtil.convertInchToMile(inputValue)));
			 text6.setText(String.valueOf(ConverterUtil.convertInchToYard(inputValue)));
			 text7.setText(String.valueOf(ConverterUtil.convertInchTofoot(inputValue)));
			 text8.setText(String.valueOf(inputValue));
			 text9.setText(String.valueOf(ConverterUtil.convertInchToNauticleMile(inputValue)));
			 break;
		 case "Nauticle Mile":
			 text1.setText(String.valueOf(ConverterUtil.convertNauticleMileToKilometer(inputValue)));
			 text2.setText(String.valueOf(ConverterUtil.convertNauticleMileTometer(inputValue)));
			 text3.setText(String.valueOf(ConverterUtil.convertNauticleMileTocentiMeter(inputValue)));
			 text4.setText(String.valueOf(ConverterUtil.convertNauticleMileToMillimeter(inputValue)));
			 text5.setText(String.valueOf(ConverterUtil.convertNauticleMileToMile(inputValue)));
			 text6.setText(String.valueOf(ConverterUtil.convertNauticleMileToYard(inputValue)));
			 text7.setText(String.valueOf(ConverterUtil.convertNauticleMileTofoot(inputValue)));
			 text8.setText(String.valueOf(ConverterUtil.convertNauticleMileToInch(inputValue)));
			 text9.setText(String.valueOf(inputValue));	
		     break;
		 }
		
   } 
		 
	 }
	 
}	